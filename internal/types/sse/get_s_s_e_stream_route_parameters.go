// Code generated by go-swagger; DO NOT EDIT.

package sse

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSSEStreamRouteParams creates a new GetSSEStreamRouteParams object
// no default values defined in spec.
func NewGetSSEStreamRouteParams() GetSSEStreamRouteParams {

	return GetSSEStreamRouteParams{}
}

// GetSSEStreamRouteParams contains all the bound params for the get s s e stream route operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSSEStreamRoute
type GetSSEStreamRouteParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Channel List
	  Required: true
	  In: query
	*/
	ChannelList []string `query:"channelList"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetSSEStreamRouteParams() beforehand.
func (o *GetSSEStreamRouteParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qChannelList, qhkChannelList, _ := qs.GetOK("channelList")
	if err := o.bindChannelList(qChannelList, qhkChannelList, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSSEStreamRouteParams) Validate(formats strfmt.Registry) error {
	var res []error

	// channelList
	// Required: true
	// AllowEmptyValue: false

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindChannelList binds and validates array parameter ChannelList from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetSSEStreamRouteParams) bindChannelList(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("channelList", "query", rawData)
	}

	var qvChannelList string
	if len(rawData) > 0 {
		qvChannelList = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	channelListIC := swag.SplitByFormat(qvChannelList, "")

	if len(channelListIC) == 0 {
		return errors.Required("channelList", "query", channelListIC)
	}

	var channelListIR []string
	for _, channelListIV := range channelListIC {
		channelListI := channelListIV

		channelListIR = append(channelListIR, channelListI)
	}

	o.ChannelList = channelListIR

	return nil
}
